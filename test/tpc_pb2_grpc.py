# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import tpc_pb2 as tpc__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in tpc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TpcServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TpcPrepare = channel.unary_unary(
                '/tpc.TpcServer/TpcPrepare',
                request_serializer=tpc__pb2.TransferReq.SerializeToString,
                response_deserializer=tpc__pb2.TransferRes.FromString,
                _registered_method=True)
        self.TpcCommit = channel.unary_unary(
                '/tpc.TpcServer/TpcCommit',
                request_serializer=tpc__pb2.TpcTid.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.TpcAbort = channel.unary_unary(
                '/tpc.TpcServer/TpcAbort',
                request_serializer=tpc__pb2.TpcTid.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Transfer = channel.unary_unary(
                '/tpc.TpcServer/Transfer',
                request_serializer=tpc__pb2.TransferReq.SerializeToString,
                response_deserializer=tpc__pb2.TransferRes.FromString,
                _registered_method=True)
        self.Balance = channel.unary_unary(
                '/tpc.TpcServer/Balance',
                request_serializer=tpc__pb2.BalanceReq.SerializeToString,
                response_deserializer=tpc__pb2.BalanceRes.FromString,
                _registered_method=True)
        self.Logs = channel.unary_unary(
                '/tpc.TpcServer/Logs',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=tpc__pb2.LogRes.FromString,
                _registered_method=True)
        self.Prepare = channel.unary_unary(
                '/tpc.TpcServer/Prepare',
                request_serializer=tpc__pb2.PrepareReq.SerializeToString,
                response_deserializer=tpc__pb2.PrepareRes.FromString,
                _registered_method=True)
        self.Accept = channel.unary_unary(
                '/tpc.TpcServer/Accept',
                request_serializer=tpc__pb2.AcceptReq.SerializeToString,
                response_deserializer=tpc__pb2.AcceptRes.FromString,
                _registered_method=True)
        self.Commit = channel.unary_unary(
                '/tpc.TpcServer/Commit',
                request_serializer=tpc__pb2.CommitReq.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Sync = channel.unary_unary(
                '/tpc.TpcServer/Sync',
                request_serializer=tpc__pb2.SyncReq.SerializeToString,
                response_deserializer=tpc__pb2.SyncRes.FromString,
                _registered_method=True)


class TpcServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def TpcPrepare(self, request, context):
        """RPCs for the two phase commit
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TpcCommit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TpcAbort(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Transfer(self, request, context):
        """RPCs for paxos
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Balance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Accept(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Commit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Sync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TpcServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TpcPrepare': grpc.unary_unary_rpc_method_handler(
                    servicer.TpcPrepare,
                    request_deserializer=tpc__pb2.TransferReq.FromString,
                    response_serializer=tpc__pb2.TransferRes.SerializeToString,
            ),
            'TpcCommit': grpc.unary_unary_rpc_method_handler(
                    servicer.TpcCommit,
                    request_deserializer=tpc__pb2.TpcTid.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'TpcAbort': grpc.unary_unary_rpc_method_handler(
                    servicer.TpcAbort,
                    request_deserializer=tpc__pb2.TpcTid.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Transfer': grpc.unary_unary_rpc_method_handler(
                    servicer.Transfer,
                    request_deserializer=tpc__pb2.TransferReq.FromString,
                    response_serializer=tpc__pb2.TransferRes.SerializeToString,
            ),
            'Balance': grpc.unary_unary_rpc_method_handler(
                    servicer.Balance,
                    request_deserializer=tpc__pb2.BalanceReq.FromString,
                    response_serializer=tpc__pb2.BalanceRes.SerializeToString,
            ),
            'Logs': grpc.unary_unary_rpc_method_handler(
                    servicer.Logs,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=tpc__pb2.LogRes.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=tpc__pb2.PrepareReq.FromString,
                    response_serializer=tpc__pb2.PrepareRes.SerializeToString,
            ),
            'Accept': grpc.unary_unary_rpc_method_handler(
                    servicer.Accept,
                    request_deserializer=tpc__pb2.AcceptReq.FromString,
                    response_serializer=tpc__pb2.AcceptRes.SerializeToString,
            ),
            'Commit': grpc.unary_unary_rpc_method_handler(
                    servicer.Commit,
                    request_deserializer=tpc__pb2.CommitReq.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Sync': grpc.unary_unary_rpc_method_handler(
                    servicer.Sync,
                    request_deserializer=tpc__pb2.SyncReq.FromString,
                    response_serializer=tpc__pb2.SyncRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tpc.TpcServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tpc.TpcServer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TpcServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def TpcPrepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/TpcPrepare',
            tpc__pb2.TransferReq.SerializeToString,
            tpc__pb2.TransferRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TpcCommit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/TpcCommit',
            tpc__pb2.TpcTid.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TpcAbort(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/TpcAbort',
            tpc__pb2.TpcTid.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Transfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/Transfer',
            tpc__pb2.TransferReq.SerializeToString,
            tpc__pb2.TransferRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Balance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/Balance',
            tpc__pb2.BalanceReq.SerializeToString,
            tpc__pb2.BalanceRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/Logs',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            tpc__pb2.LogRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/Prepare',
            tpc__pb2.PrepareReq.SerializeToString,
            tpc__pb2.PrepareRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Accept(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/Accept',
            tpc__pb2.AcceptReq.SerializeToString,
            tpc__pb2.AcceptRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/Commit',
            tpc__pb2.CommitReq.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Sync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tpc.TpcServer/Sync',
            tpc__pb2.SyncReq.SerializeToString,
            tpc__pb2.SyncRes.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
